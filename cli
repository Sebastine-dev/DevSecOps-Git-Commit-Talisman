#!/usr/bin/env bash
# This script was generated by bashly 0.8.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Development Utilities\n"
    echo

  else
    printf "cli - Development Utilities\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli COMMAND\n"
  printf "  cli [COMMAND] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "Environment Commands:\n"
  echo "  configure                Configure development environment"
  echo "  configure hooks          Configure talisman hooks"
  echo "  configure download       Download talisman binaries"
  echo "  configure update         Update talisman binaries if newer version is available"
  echo "  configure search-repos   Search for git repositories,"
  echo
  printf "Commands:\n"
  echo "  run                      Run talisman git hook"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_configure_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli configure - Configure development environment\n"
    echo

  else
    printf "cli configure - Configure development environment\n"
    echo

  fi

  printf "Alias: config\n"
  echo

  printf "Usage:\n"
  printf "  cli configure COMMAND\n"
  printf "  cli configure [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  hooks          Configure talisman hooks"
  echo "  download       Download talisman binaries"
  echo "  update         Update talisman binaries if newer version is available"
  echo "  search-repos   Search for git repositories,"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_configure_hooks_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli configure hooks - Configure talisman hooks\n"
    echo

  else
    printf "cli configure hooks - Configure talisman hooks\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli configure hooks [OPTIONS]\n"
  printf "  cli configure hooks --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --hook, -H HOOK (required)"
    printf "    Which git hook to install\n"
    printf "    Allowed: pre-commit, pre-push\n"
    echo

    # :flag.usage
    echo "  --verbose, -v"
    printf "    Enable verbose output.\n"
    echo

  fi
}

# :command.usage
cli_configure_download_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli configure download - Download talisman binaries\n"
    echo

  else
    printf "cli configure download - Download talisman binaries\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli configure download [OPTIONS]\n"
  printf "  cli configure download --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --verbose, -v"
    printf "    Enable verbose output.\n"
    echo

    # :flag.usage
    echo "  --repo-org, -r REPO-ORG"
    printf "    The repo org to download from\n"
    printf "    Default: thoughtworks/talisman\n"
    echo

  fi
}

# :command.usage
cli_configure_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli configure update - Update talisman binaries if newer version is available\n"
    echo

  else
    printf "cli configure update - Update talisman binaries if newer version is available\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli configure update [OPTIONS]\n"
  printf "  cli configure update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --verbose, -v"
    printf "    Enable verbose output.\n"
    echo

    # :flag.usage
    echo "  --repo-org, -r REPO-ORG"
    printf "    The repo org to download from\n"
    printf "    Default: thoughtworks/talisman\n"
    echo

  fi
}

# :command.usage
cli_configure_search_repos_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli configure search-repos - Search for git repositories,\n"
    echo

  else
    printf "cli configure search-repos - Search for git repositories,\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli configure search-repos [OPTIONS]\n"
  printf "  cli configure search-repos --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --path, -p PATH"
    printf "    The path to search for git repositories\n"
    echo

    # :flag.usage
    echo "  --verbose, -v"
    printf "    Enable verbose output.\n"
    echo

  fi
}

# :command.usage
cli_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli run - Run talisman git hook\n"
    echo

  else
    printf "cli run - Run talisman git hook\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli run [OPTIONS]\n"
  printf "  cli run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --hook, -H HOOK (required)"
    printf "    Which git hook to run\n"
    printf "    Allowed: pre-commit, pre-push\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/add_once_to_file.sh
#!/usr/bin/env bash

add_once_to_file() {
  local text=$1
  local target_file=$2

  if [[ ! -f "$target_file" ]]; then
    touch "$target_file"
  fi

  if ! grep -Fq "$text" "$target_file"
  then
    echo "$text" >>"$target_file"
  fi
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m" "$*";
  else
    printf "%b" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

println_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red_ln() { println_in_color "\e[31m" "$*"; }
green_ln() { println_in_color "\e[32m" "$*"; }
yellow_ln() { println_in_color "\e[33m" "$*"; }
blue_ln() { println_in_color "\e[34m" "$*"; }
magenta_ln() { println_in_color "\e[35m" "$*"; }
cyan_ln() { println_in_color "\e[36m" "$*"; }
white_ln() { println_in_color "\e[37m" "$*"; }
bold_ln() { println_in_color "\e[1m" "$*"; }
underlined_ln() { println_in_color "\e[4m" "$*"; }
red_bold_ln() { println_in_color "\e[1;31m" "$*"; }
green_bold_ln() { println_in_color "\e[1;32m" "$*"; }
yellow_bold_ln() { println_in_color "\e[1;33m" "$*"; }
blue_bold_ln() { println_in_color "\e[1;34m" "$*"; }
magenta_bold_ln() { println_in_color "\e[1;35m" "$*"; }
cyan_bold_ln() { println_in_color "\e[1;36m" "$*"; }
white_bold_ln() { println_in_color "\e[1;37m" "$*"; }
red_underlined_ln() { println_in_color "\e[4;31m" "$*"; }
green_underlined_ln() { println_in_color "\e[4;32m" "$*"; }
yellow_underlined_ln() { println_in_color "\e[4;33m" "$*"; }
blue_underlined_ln() { println_in_color "\e[4;34m" "$*"; }
magenta_underlined_ln() { println_in_color "\e[4;35m" "$*"; }
cyan_underlined_ln() { println_in_color "\e[4;36m" "$*"; }

# src/lib/emojis.sh
#!/bin/bash

# Obtained with the code written in next file
emoji_grinning_face=😀
emoji_grinning_face_with_big_eyes=😃
emoji_grinning_face_with_smiling_eyes=😄
emoji_beaming_face_with_smiling_eyes=😁
emoji_grinning_squinting_face=😆
emoji_grinning_face_with_sweat=😅
emoji_rolling_on_the_floor_laughing=🤣
emoji_face_with_tears_of_joy=😂
emoji_slightly_smiling_face=🙂
emoji_upside_down_face=🙃
emoji_winking_face=😉
emoji_smiling_face_with_smiling_eyes=😊
emoji_smiling_face_with_halo=😇
emoji_smiling_face_with_hearts=🥰
emoji_smiling_face_with_heart_eyes=😍
emoji_star_struck=🤩
emoji_face_blowing_a_kiss=😘
emoji_kissing_face=😗
emoji_smiling_face=☺
emoji_kissing_face_with_closed_eyes=😚
emoji_kissing_face_with_smiling_eyes=😙
emoji_face_savoring_food=😋
emoji_face_with_tongue=😛
emoji_winking_face_with_tongue=😜
emoji_zany_face=🤪
emoji_squinting_face_with_tongue=😝
emoji_money_mouth_face=🤑
emoji_hugging_face=🤗
emoji_face_with_hand_over_mouth=🤭
emoji_shushing_face=🤫
emoji_thinking_face=🤔
emoji_zipper_mouth_face=🤐
emoji_face_with_raised_eyebrow=🤨
emoji_neutral_face=😐
emoji_expressionless_face=😑
emoji_face_without_mouth=😶
emoji_smirking_face=😏
emoji_unamused_face=😒
emoji_face_with_rolling_eyes=🙄
emoji_grimacing_face=😬
emoji_lying_face=🤥
emoji_relieved_face=😌
emoji_pensive_face=😔
emoji_sleepy_face=😪
emoji_drooling_face=🤤
emoji_sleeping_face=😴
emoji_face_with_medical_mask=😷
emoji_face_with_thermometer=🤒
emoji_face_with_head_bandage=🤕
emoji_nauseated_face=🤢
emoji_face_vomiting=🤮
emoji_sneezing_face=🤧
emoji_hot_face=🥵
emoji_cold_face=🥶
emoji_woozy_face=🥴
emoji_dizzy_face=😵
emoji_exploding_head=🤯
emoji_cowboy_hat_face=🤠
emoji_partying_face=🥳
emoji_smiling_face_with_sunglasses=😎
emoji_nerd_face=🤓
emoji_face_with_monocle=🧐
emoji_confused_face=😕
emoji_worried_face=😟
emoji_slightly_frowning_face=🙁
emoji_frowning_face=☹
emoji_face_with_open_mouth=😮
emoji_hushed_face=😯
emoji_astonished_face=😲
emoji_flushed_face=😳
emoji_pleading_face=🥺
emoji_frowning_face_with_open_mouth=😦
emoji_anguished_face=😧
emoji_fearful_face=😨
emoji_anxious_face_with_sweat=😰
emoji_sad_but_relieved_face=😥
emoji_crying_face=😢
emoji_loudly_crying_face=😭
emoji_face_screaming_in_fear=😱
emoji_confounded_face=😖
emoji_persevering_face=😣
emoji_disappointed_face=😞
emoji_downcast_face_with_sweat=😓
emoji_weary_face=😩
emoji_tired_face=😫
emoji_yawning_face=🥱
emoji_face_with_steam_from_nose=😤
emoji_pouting_face=😡
emoji_angry_face=😠
emoji_face_with_symbols_on_mouth=🤬
emoji_smiling_face_with_horns=😈
emoji_angry_face_with_horns=👿
emoji_skull=💀
emoji_skull_and_crossbones=☠
emoji_pile_of_poo=💩
emoji_clown_face=🤡
emoji_ogre=👹
emoji_goblin=👺
emoji_ghost=👻
emoji_alien=👽
emoji_alien_monster=👾
emoji_robot=🤖
emoji_grinning_cat=😺
emoji_grinning_cat_with_smiling_eyes=😸
emoji_cat_with_tears_of_joy=😹
emoji_smiling_cat_with_heart_eyes=😻
emoji_cat_with_wry_smile=😼
emoji_kissing_cat=😽
emoji_weary_cat=🙀
emoji_crying_cat=😿
emoji_pouting_cat=😾
emoji_see_no_evil_monkey=🙈
emoji_hear_no_evil_monkey=🙉
emoji_speak_no_evil_monkey=🙊
emoji_kiss_mark=💋
emoji_love_letter=💌
emoji_heart_with_arrow=💘
emoji_heart_with_ribbon=💝
emoji_sparkling_heart=💖
emoji_growing_heart=💗
emoji_beating_heart=💓
emoji_revolving_hearts=💞
emoji_two_hearts=💕
emoji_heart_decoration=💟
emoji_heart_exclamation=❣
emoji_broken_heart=💔
emoji_red_heart=❤
emoji_orange_heart=🧡
emoji_yellow_heart=💛
emoji_green_heart=💚
emoji_blue_heart=💙
emoji_purple_heart=💜
emoji_brown_heart=🤎
emoji_black_heart=🖤
emoji_white_heart=🤍
emoji_hundred_points=💯
emoji_anger_symbol=💢
emoji_collision=💥
emoji_dizzy=💫
emoji_sweat_droplets=💦
emoji_dashing_away=💨
emoji_hole=🕳
emoji_bomb=💣
emoji_speech_balloon=💬
emoji_eye_in_speech_bubble=👁️‍🗨️
emoji_left_speech_bubble=🗨
emoji_right_anger_bubble=🗯
emoji_thought_balloon=💭
emoji_zzz=💤
emoji_waving_hand=👋
emoji_raised_back_of_hand=🤚
emoji_hand_with_fingers_splayed=🖐
emoji_raised_hand=✋
emoji_vulcan_salute=🖖
emoji_ok_hand=👌
emoji_pinching_hand=🤏
emoji_victory_hand=✌
emoji_crossed_fingers=🤞
emoji_love_you_gesture=🤟
emoji_sign_of_the_horns=🤘
emoji_call_me_hand=🤙
emoji_backhand_index_pointing_left=👈
emoji_backhand_index_pointing_right=👉
emoji_backhand_index_pointing_up=👆
emoji_middle_finger=🖕
emoji_backhand_index_pointing_down=👇
emoji_index_pointing_up=☝
emoji_thumbs_up=👍
emoji_thumbs_down=👎
emoji_raised_fist=✊
emoji_oncoming_fist=👊
emoji_left_facing_fist=🤛
emoji_right_facing_fist=🤜
emoji_clapping_hands=👏
emoji_raising_hands=🙌
emoji_open_hands=👐
emoji_palms_up_together=🤲
emoji_handshake=🤝
emoji_folded_hands=🙏
emoji_writing_hand=✍
emoji_nail_polish=💅
emoji_selfie=🤳
emoji_flexed_biceps=💪
emoji_mechanical_arm=🦾
emoji_mechanical_leg=🦿
emoji_leg=🦵
emoji_foot=🦶
emoji_ear=👂
emoji_ear_with_hearing_aid=🦻
emoji_nose=👃
emoji_brain=🧠
emoji_tooth=🦷
emoji_bone=🦴
emoji_eyes=👀
emoji_eye=👁
emoji_tongue=👅
emoji_mouth=👄
emoji_baby=👶
emoji_child=🧒
emoji_boy=👦
emoji_girl=👧
emoji_person=🧑
emoji_person_blond_hair=👱
emoji_man=👨
emoji_man_beard=🧔
emoji_man_blond_hair=👱‍♂️
emoji_man_red_hair=👨‍🦰
emoji_man_curly_hair=👨‍🦱
emoji_man_white_hair=👨‍🦳
emoji_man_bald=👨‍🦲
emoji_woman=👩
emoji_woman_blond_hair=👱‍♀️
emoji_woman_red_hair=👩‍🦰
emoji_woman_curly_hair=👩‍🦱
emoji_woman_white_hair=👩‍🦳
emoji_woman_bald=👩‍🦲
emoji_older_person=🧓
emoji_old_man=👴
emoji_old_woman=👵
emoji_person_frowning=🙍
emoji_man_frowning=🙍‍♂️
emoji_woman_frowning=🙍‍♀️
emoji_person_pouting=🙎
emoji_man_pouting=🙎‍♂️
emoji_woman_pouting=🙎‍♀️
emoji_person_gesturing_no=🙅
emoji_man_gesturing_no=🙅‍♂️
emoji_woman_gesturing_no=🙅‍♀️
emoji_person_gesturing_ok=🙆
emoji_man_gesturing_ok=🙆‍♂️
emoji_woman_gesturing_ok=🙆‍♀️
emoji_person_tipping_hand=💁
emoji_man_tipping_hand=💁‍♂️
emoji_woman_tipping_hand=💁‍♀️
emoji_person_raising_hand=🙋
emoji_man_raising_hand=🙋‍♂️
emoji_woman_raising_hand=🙋‍♀️
emoji_deaf_person=🧏
emoji_deaf_man=🧏‍♂️
emoji_deaf_woman=🧏‍♀️
emoji_person_bowing=🙇
emoji_man_bowing=🙇‍♂️
emoji_woman_bowing=🙇‍♀️
emoji_person_facepalming=🤦
emoji_man_facepalming=🤦‍♂️
emoji_woman_facepalming=🤦‍♀️
emoji_person_shrugging=🤷
emoji_man_shrugging=🤷‍♂️
emoji_woman_shrugging=🤷‍♀️
emoji_man_health_worker=👨‍⚕️
emoji_woman_health_worker=👩‍⚕️
emoji_man_student=👨‍🎓
emoji_woman_student=👩‍🎓
emoji_man_teacher=👨‍🏫
emoji_woman_teacher=👩‍🏫
emoji_man_judge=👨‍⚖️
emoji_woman_judge=👩‍⚖️
emoji_man_farmer=👨‍🌾
emoji_woman_farmer=👩‍🌾
emoji_man_cook=👨‍🍳
emoji_woman_cook=👩‍🍳
emoji_man_mechanic=👨‍🔧
emoji_woman_mechanic=👩‍🔧
emoji_man_factory_worker=👨‍🏭
emoji_woman_factory_worker=👩‍🏭
emoji_man_office_worker=👨‍💼
emoji_woman_office_worker=👩‍💼
emoji_man_scientist=👨‍🔬
emoji_woman_scientist=👩‍🔬
emoji_man_technologist=👨‍💻
emoji_woman_technologist=👩‍💻
emoji_man_singer=👨‍🎤
emoji_woman_singer=👩‍🎤
emoji_man_artist=👨‍🎨
emoji_woman_artist=👩‍🎨
emoji_man_pilot=👨‍✈️
emoji_woman_pilot=👩‍✈️
emoji_man_astronaut=👨‍🚀
emoji_woman_astronaut=👩‍🚀
emoji_man_firefighter=👨‍🚒
emoji_woman_firefighter=👩‍🚒
emoji_police_officer=👮
emoji_man_police_officer=👮‍♂️
emoji_woman_police_officer=👮‍♀️
emoji_detective=🕵
emoji_man_detective=🕵️‍♂️
emoji_woman_detective=🕵️‍♀️
emoji_guard=💂
emoji_man_guard=💂‍♂️
emoji_woman_guard=💂‍♀️
emoji_construction_worker=👷
emoji_man_construction_worker=👷‍♂️
emoji_woman_construction_worker=👷‍♀️
emoji_prince=🤴
emoji_princess=👸
emoji_person_wearing_turban=👳
emoji_man_wearing_turban=👳‍♂️
emoji_woman_wearing_turban=👳‍♀️
emoji_man_with_chinese_cap=👲
emoji_woman_with_headscarf=🧕
emoji_man_in_tuxedo=🤵
emoji_bride_with_veil=👰
emoji_pregnant_woman=🤰
emoji_breast_feeding=🤱
emoji_baby_angel=👼
emoji_santa_claus=🎅
emoji_mrs_claus=🤶
emoji_superhero=🦸
emoji_man_superhero=🦸‍♂️
emoji_woman_superhero=🦸‍♀️
emoji_supervillain=🦹
emoji_man_supervillain=🦹‍♂️
emoji_woman_supervillain=🦹‍♀️
emoji_mage=🧙
emoji_man_mage=🧙‍♂️
emoji_woman_mage=🧙‍♀️
emoji_fairy=🧚
emoji_man_fairy=🧚‍♂️
emoji_woman_fairy=🧚‍♀️
emoji_vampire=🧛
emoji_man_vampire=🧛‍♂️
emoji_woman_vampire=🧛‍♀️
emoji_merperson=🧜
emoji_merman=🧜‍♂️
emoji_mermaid=🧜‍♀️
emoji_elf=🧝
emoji_man_elf=🧝‍♂️
emoji_woman_elf=🧝‍♀️
emoji_genie=🧞
emoji_man_genie=🧞‍♂️
emoji_woman_genie=🧞‍♀️
emoji_zombie=🧟
emoji_man_zombie=🧟‍♂️
emoji_woman_zombie=🧟‍♀️
emoji_person_getting_massage=💆
emoji_man_getting_massage=💆‍♂️
emoji_woman_getting_massage=💆‍♀️
emoji_person_getting_haircut=💇
emoji_man_getting_haircut=💇‍♂️
emoji_woman_getting_haircut=💇‍♀️
emoji_person_walking=🚶
emoji_man_walking=🚶‍♂️
emoji_woman_walking=🚶‍♀️
emoji_person_standing=🧍
emoji_man_standing=🧍‍♂️
emoji_woman_standing=🧍‍♀️
emoji_person_kneeling=🧎
emoji_man_kneeling=🧎‍♂️
emoji_woman_kneeling=🧎‍♀️
emoji_man_with_probing_cane=👨‍🦯
emoji_woman_with_probing_cane=👩‍🦯
emoji_man_in_motorized_wheelchair=👨‍🦼
emoji_woman_in_motorized_wheelchair=👩‍🦼
emoji_man_in_manual_wheelchair=👨‍🦽
emoji_woman_in_manual_wheelchair=👩‍🦽
emoji_person_running=🏃
emoji_man_running=🏃‍♂️
emoji_woman_running=🏃‍♀️
emoji_woman_dancing=💃
emoji_man_dancing=🕺
emoji_man_in_suit_levitating=🕴
emoji_people_with_bunny_ears=👯
emoji_men_with_bunny_ears=👯‍♂️
emoji_women_with_bunny_ears=👯‍♀️
emoji_person_in_steamy_room=🧖
emoji_man_in_steamy_room=🧖‍♂️
emoji_woman_in_steamy_room=🧖‍♀️
emoji_person_climbing=🧗
emoji_man_climbing=🧗‍♂️
emoji_woman_climbing=🧗‍♀️
emoji_person_fencing=🤺
emoji_horse_racing=🏇
emoji_skier=⛷
emoji_snowboarder=🏂
emoji_person_golfing=🏌
emoji_man_golfing=🏌️‍♂️
emoji_woman_golfing=🏌️‍♀️
emoji_person_surfing=🏄
emoji_man_surfing=🏄‍♂️
emoji_woman_surfing=🏄‍♀️
emoji_person_rowing_boat=🚣
emoji_man_rowing_boat=🚣‍♂️
emoji_woman_rowing_boat=🚣‍♀️
emoji_person_swimming=🏊
emoji_man_swimming=🏊‍♂️
emoji_woman_swimming=🏊‍♀️
emoji_person_bouncing_ball=⛹
emoji_man_bouncing_ball=⛹️‍♂️
emoji_woman_bouncing_ball=⛹️‍♀️
emoji_person_lifting_weights=🏋
emoji_man_lifting_weights=🏋️‍♂️
emoji_woman_lifting_weights=🏋️‍♀️
emoji_person_biking=🚴
emoji_man_biking=🚴‍♂️
emoji_woman_biking=🚴‍♀️
emoji_person_mountain_biking=🚵
emoji_man_mountain_biking=🚵‍♂️
emoji_woman_mountain_biking=🚵‍♀️
emoji_person_cartwheeling=🤸
emoji_man_cartwheeling=🤸‍♂️
emoji_woman_cartwheeling=🤸‍♀️
emoji_people_wrestling=🤼
emoji_men_wrestling=🤼‍♂️
emoji_women_wrestling=🤼‍♀️
emoji_person_playing_water_polo=🤽
emoji_man_playing_water_polo=🤽‍♂️
emoji_woman_playing_water_polo=🤽‍♀️
emoji_person_playing_handball=🤾
emoji_man_playing_handball=🤾‍♂️
emoji_woman_playing_handball=🤾‍♀️
emoji_person_juggling=🤹
emoji_man_juggling=🤹‍♂️
emoji_woman_juggling=🤹‍♀️
emoji_person_in_lotus_position=🧘
emoji_man_in_lotus_position=🧘‍♂️
emoji_woman_in_lotus_position=🧘‍♀️
emoji_person_taking_bath=🛀
emoji_person_in_bed=🛌
emoji_people_holding_hands=🧑‍🤝‍🧑
emoji_women_holding_hands=👭
emoji_woman_and_man_holding_hands=👫
emoji_men_holding_hands=👬
emoji_kiss=💏
emoji_kiss_woman_man=👩‍❤️‍💋‍👨
emoji_kiss_man_man=👨‍❤️‍💋‍👨
emoji_kiss_woman_woman=👩‍❤️‍💋‍👩
emoji_couple_with_heart=💑
emoji_couple_with_heart_woman_man=👩‍❤️‍👨
emoji_couple_with_heart_man_man=👨‍❤️‍👨
emoji_couple_with_heart_woman_woman=👩‍❤️‍👩
emoji_family=👪
emoji_family_man_woman_boy=👨‍👩‍👦
emoji_family_man_woman_girl=👨‍👩‍👧
emoji_family_man_woman_girl_boy=👨‍👩‍👧‍👦
emoji_family_man_woman_boy_boy=👨‍👩‍👦‍👦
emoji_family_man_woman_girl_girl=👨‍👩‍👧‍👧
emoji_family_man_man_boy=👨‍👨‍👦
emoji_family_man_man_girl=👨‍👨‍👧
emoji_family_man_man_girl_boy=👨‍👨‍👧‍👦
emoji_family_man_man_boy_boy=👨‍👨‍👦‍👦
emoji_family_man_man_girl_girl=👨‍👨‍👧‍👧
emoji_family_woman_woman_boy=👩‍👩‍👦
emoji_family_woman_woman_girl=👩‍👩‍👧
emoji_family_woman_woman_girl_boy=👩‍👩‍👧‍👦
emoji_family_woman_woman_boy_boy=👩‍👩‍👦‍👦
emoji_family_woman_woman_girl_girl=👩‍👩‍👧‍👧
emoji_family_man_boy=👨‍👦
emoji_family_man_boy_boy=👨‍👦‍👦
emoji_family_man_girl=👨‍👧
emoji_family_man_girl_boy=👨‍👧‍👦
emoji_family_man_girl_girl=👨‍👧‍👧
emoji_family_woman_boy=👩‍👦
emoji_family_woman_boy_boy=👩‍👦‍👦
emoji_family_woman_girl=👩‍👧
emoji_family_woman_girl_boy=👩‍👧‍👦
emoji_family_woman_girl_girl=👩‍👧‍👧
emoji_speaking_head=🗣
emoji_bust_in_silhouette=👤
emoji_busts_in_silhouette=👥
emoji_footprints=👣
emoji_red_hair=🦰
emoji_curly_hair=🦱
emoji_white_hair=🦳
emoji_bald=🦲
emoji_monkey_face=🐵
emoji_monkey=🐒
emoji_gorilla=🦍
emoji_orangutan=🦧
emoji_dog_face=🐶
emoji_dog=🐕
emoji_guide_dog=🦮
emoji_service_dog=🐕‍🦺
emoji_poodle=🐩
emoji_wolf=🐺
emoji_fox=🦊
emoji_raccoon=🦝
emoji_cat_face=🐱
emoji_cat=🐈
emoji_lion=🦁
emoji_tiger_face=🐯
emoji_tiger=🐅
emoji_leopard=🐆
emoji_horse_face=🐴
emoji_horse=🐎
emoji_unicorn=🦄
emoji_zebra=🦓
emoji_deer=🦌
emoji_cow_face=🐮
emoji_ox=🐂
emoji_water_buffalo=🐃
emoji_cow=🐄
emoji_pig_face=🐷
emoji_pig=🐖
emoji_boar=🐗
emoji_pig_nose=🐽
emoji_ram=🐏
emoji_ewe=🐑
emoji_goat=🐐
emoji_camel=🐪
emoji_two_hump_camel=🐫
emoji_llama=🦙
emoji_giraffe=🦒
emoji_elephant=🐘
emoji_rhinoceros=🦏
emoji_hippopotamus=🦛
emoji_mouse_face=🐭
emoji_mouse=🐁
emoji_rat=🐀
emoji_hamster=🐹
emoji_rabbit_face=🐰
emoji_rabbit=🐇
emoji_chipmunk=🐿
emoji_hedgehog=🦔
emoji_bat=🦇
emoji_bear=🐻
emoji_koala=🐨
emoji_panda=🐼
emoji_sloth=🦥
emoji_otter=🦦
emoji_skunk=🦨
emoji_kangaroo=🦘
emoji_badger=🦡
emoji_paw_prints=🐾
emoji_turkey=🦃
emoji_chicken=🐔
emoji_rooster=🐓
emoji_hatching_chick=🐣
emoji_baby_chick=🐤
emoji_front_facing_baby_chick=🐥
emoji_bird=🐦
emoji_penguin=🐧
emoji_dove=🕊
emoji_eagle=🦅
emoji_duck=🦆
emoji_swan=🦢
emoji_owl=🦉
emoji_flamingo=🦩
emoji_peacock=🦚
emoji_parrot=🦜
emoji_frog=🐸
emoji_crocodile=🐊
emoji_turtle=🐢
emoji_lizard=🦎
emoji_snake=🐍
emoji_dragon_face=🐲
emoji_dragon=🐉
emoji_sauropod=🦕
emoji_t_rex=🦖
emoji_spouting_whale=🐳
emoji_whale=🐋
emoji_dolphin=🐬
emoji_fish=🐟
emoji_tropical_fish=🐠
emoji_blowfish=🐡
emoji_shark=🦈
emoji_octopus=🐙
emoji_spiral_shell=🐚
emoji_snail=🐌
emoji_butterfly=🦋
emoji_bug=🐛
emoji_ant=🐜
emoji_honeybee=🐝
emoji_lady_beetle=🐞
emoji_cricket=🦗
emoji_spider=🕷
emoji_spider_web=🕸
emoji_scorpion=🦂
emoji_mosquito=🦟
emoji_microbe=🦠
emoji_bouquet=💐
emoji_cherry_blossom=🌸
emoji_white_flower=💮
emoji_rosette=🏵
emoji_rose=🌹
emoji_wilted_flower=🥀
emoji_hibiscus=🌺
emoji_sunflower=🌻
emoji_blossom=🌼
emoji_tulip=🌷
emoji_seedling=🌱
emoji_evergreen_tree=🌲
emoji_deciduous_tree=🌳
emoji_palm_tree=🌴
emoji_cactus=🌵
emoji_sheaf_of_rice=🌾
emoji_herb=🌿
emoji_shamrock=☘
emoji_four_leaf_clover=🍀
emoji_maple_leaf=🍁
emoji_fallen_leaf=🍂
emoji_leaf_fluttering_in_wind=🍃
emoji_grapes=🍇
emoji_melon=🍈
emoji_watermelon=🍉
emoji_tangerine=🍊
emoji_lemon=🍋
emoji_banana=🍌
emoji_pineapple=🍍
emoji_mango=🥭
emoji_red_apple=🍎
emoji_green_apple=🍏
emoji_pear=🍐
emoji_peach=🍑
emoji_cherries=🍒
emoji_strawberry=🍓
emoji_kiwi_fruit=🥝
emoji_tomato=🍅
emoji_coconut=🥥
emoji_avocado=🥑
emoji_eggplant=🍆
emoji_potato=🥔
emoji_carrot=🥕
emoji_ear_of_corn=🌽
emoji_hot_pepper=🌶
emoji_cucumber=🥒
emoji_leafy_green=🥬
emoji_broccoli=🥦
emoji_garlic=🧄
emoji_onion=🧅
emoji_mushroom=🍄
emoji_peanuts=🥜
emoji_chestnut=🌰
emoji_bread=🍞
emoji_croissant=🥐
emoji_baguette_bread=🥖
emoji_pretzel=🥨
emoji_bagel=🥯
emoji_pancakes=🥞
emoji_waffle=🧇
emoji_cheese_wedge=🧀
emoji_meat_on_bone=🍖
emoji_poultry_leg=🍗
emoji_cut_of_meat=🥩
emoji_bacon=🥓
emoji_hamburger=🍔
emoji_french_fries=🍟
emoji_pizza=🍕
emoji_hot_dog=🌭
emoji_sandwich=🥪
emoji_taco=🌮
emoji_burrito=🌯
emoji_stuffed_flatbread=🥙
emoji_falafel=🧆
emoji_egg=🥚
emoji_cooking=🍳
emoji_shallow_pan_of_food=🥘
emoji_pot_of_food=🍲
emoji_bowl_with_spoon=🥣
emoji_green_salad=🥗
emoji_popcorn=🍿
emoji_butter=🧈
emoji_salt=🧂
emoji_canned_food=🥫
emoji_bento_box=🍱
emoji_rice_cracker=🍘
emoji_rice_ball=🍙
emoji_cooked_rice=🍚
emoji_curry_rice=🍛
emoji_steaming_bowl=🍜
emoji_spaghetti=🍝
emoji_roasted_sweet_potato=🍠
emoji_oden=🍢
emoji_sushi=🍣
emoji_fried_shrimp=🍤
emoji_fish_cake_with_swirl=🍥
emoji_moon_cake=🥮
emoji_dango=🍡
emoji_dumpling=🥟
emoji_fortune_cookie=🥠
emoji_takeout_box=🥡
emoji_crab=🦀
emoji_lobster=🦞
emoji_shrimp=🦐
emoji_squid=🦑
emoji_oyster=🦪
emoji_soft_ice_cream=🍦
emoji_shaved_ice=🍧
emoji_ice_cream=🍨
emoji_doughnut=🍩
emoji_cookie=🍪
emoji_birthday_cake=🎂
emoji_shortcake=🍰
emoji_cupcake=🧁
emoji_pie=🥧
emoji_chocolate_bar=🍫
emoji_candy=🍬
emoji_lollipop=🍭
emoji_custard=🍮
emoji_honey_pot=🍯
emoji_baby_bottle=🍼
emoji_glass_of_milk=🥛
emoji_hot_beverage=☕
emoji_teacup_without_handle=🍵
emoji_sake=🍶
emoji_bottle_with_popping_cork=🍾
emoji_wine_glass=🍷
emoji_cocktail_glass=🍸
emoji_tropical_drink=🍹
emoji_beer_mug=🍺
emoji_clinking_beer_mugs=🍻
emoji_clinking_glasses=🥂
emoji_tumbler_glass=🥃
emoji_cup_with_straw=🥤
emoji_beverage_box=🧃
emoji_mate=🧉
emoji_ice_cube=🧊
emoji_chopsticks=🥢
emoji_fork_and_knife_with_plate=🍽
emoji_fork_and_knife=🍴
emoji_spoon=🥄
emoji_kitchen_knife=🔪
emoji_amphora=🏺
emoji_globe_showing_europe_africa=🌍
emoji_globe_showing_americas=🌎
emoji_globe_showing_asia_australia=🌏
emoji_globe_with_meridians=🌐
emoji_world_map=🗺
emoji_map_of_japan=🗾
emoji_compass=🧭
emoji_snow_capped_mountain=🏔
emoji_mountain=⛰
emoji_volcano=🌋
emoji_mount_fuji=🗻
emoji_camping=🏕
emoji_beach_with_umbrella=🏖
emoji_desert=🏜
emoji_desert_island=🏝
emoji_national_park=🏞
emoji_stadium=🏟
emoji_classical_building=🏛
emoji_building_construction=🏗
emoji_brick=🧱
emoji_houses=🏘
emoji_derelict_house=🏚
emoji_house=🏠
emoji_house_with_garden=🏡
emoji_office_building=🏢
emoji_japanese_post_office=🏣
emoji_post_office=🏤
emoji_hospital=🏥
emoji_bank=🏦
emoji_hotel=🏨
emoji_love_hotel=🏩
emoji_convenience_store=🏪
emoji_school=🏫
emoji_department_store=🏬
emoji_factory=🏭
emoji_japanese_castle=🏯
emoji_castle=🏰
emoji_wedding=💒
emoji_tokyo_tower=🗼
emoji_statue_of_liberty=🗽
emoji_church=⛪
emoji_mosque=🕌
emoji_hindu_temple=🛕
emoji_synagogue=🕍
emoji_shinto_shrine=⛩
emoji_kaaba=🕋
emoji_fountain=⛲
emoji_tent=⛺
emoji_foggy=🌁
emoji_night_with_stars=🌃
emoji_cityscape=🏙
emoji_sunrise_over_mountains=🌄
emoji_sunrise=🌅
emoji_cityscape_at_dusk=🌆
emoji_sunset=🌇
emoji_bridge_at_night=🌉
emoji_hot_springs=♨
emoji_carousel_horse=🎠
emoji_ferris_wheel=🎡
emoji_roller_coaster=🎢
emoji_barber_pole=💈
emoji_circus_tent=🎪
emoji_locomotive=🚂
emoji_railway_car=🚃
emoji_high_speed_train=🚄
emoji_bullet_train=🚅
emoji_train=🚆
emoji_metro=🚇
emoji_light_rail=🚈
emoji_station=🚉
emoji_tram=🚊
emoji_monorail=🚝
emoji_mountain_railway=🚞
emoji_tram_car=🚋
emoji_bus=🚌
emoji_oncoming_bus=🚍
emoji_trolleybus=🚎
emoji_minibus=🚐
emoji_ambulance=🚑
emoji_fire_engine=🚒
emoji_police_car=🚓
emoji_oncoming_police_car=🚔
emoji_taxi=🚕
emoji_oncoming_taxi=🚖
emoji_automobile=🚗
emoji_oncoming_automobile=🚘
emoji_sport_utility_vehicle=🚙
emoji_delivery_truck=🚚
emoji_articulated_lorry=🚛
emoji_tractor=🚜
emoji_racing_car=🏎
emoji_motorcycle=🏍
emoji_motor_scooter=🛵
emoji_manual_wheelchair=🦽
emoji_motorized_wheelchair=🦼
emoji_auto_rickshaw=🛺
emoji_bicycle=🚲
emoji_kick_scooter=🛴
emoji_skateboard=🛹
emoji_bus_stop=🚏
emoji_motorway=🛣
emoji_railway_track=🛤
emoji_oil_drum=🛢
emoji_fuel_pump=⛽
emoji_police_car_light=🚨
emoji_horizontal_traffic_light=🚥
emoji_vertical_traffic_light=🚦
emoji_stop_sign=🛑
emoji_construction=🚧
emoji_anchor=⚓
emoji_sailboat=⛵
emoji_canoe=🛶
emoji_speedboat=🚤
emoji_passenger_ship=🛳
emoji_ferry=⛴
emoji_motor_boat=🛥
emoji_ship=🚢
emoji_airplane=✈
emoji_small_airplane=🛩
emoji_airplane_departure=🛫
emoji_airplane_arrival=🛬
emoji_parachute=🪂
emoji_seat=💺
emoji_helicopter=🚁
emoji_suspension_railway=🚟
emoji_mountain_cableway=🚠
emoji_aerial_tramway=🚡
emoji_satellite=🛰
emoji_rocket=🚀
emoji_flying_saucer=🛸
emoji_bellhop_bell=🛎
emoji_luggage=🧳
emoji_hourglass_done=⌛
emoji_hourglass_not_done=⏳
emoji_watch=⌚
emoji_alarm_clock=⏰
emoji_stopwatch=⏱
emoji_timer_clock=⏲
emoji_mantelpiece_clock=🕰
emoji_twelve_oclock=🕛
emoji_twelve_thirty=🕧
emoji_one_oclock=🕐
emoji_one_thirty=🕜
emoji_two_oclock=🕑
emoji_two_thirty=🕝
emoji_three_oclock=🕒
emoji_three_thirty=🕞
emoji_four_oclock=🕓
emoji_four_thirty=🕟
emoji_five_oclock=🕔
emoji_five_thirty=🕠
emoji_six_oclock=🕕
emoji_six_thirty=🕡
emoji_seven_oclock=🕖
emoji_seven_thirty=🕢
emoji_eight_oclock=🕗
emoji_eight_thirty=🕣
emoji_nine_oclock=🕘
emoji_nine_thirty=🕤
emoji_ten_oclock=🕙
emoji_ten_thirty=🕥
emoji_eleven_oclock=🕚
emoji_eleven_thirty=🕦
emoji_new_moon=🌑
emoji_waxing_crescent_moon=🌒
emoji_first_quarter_moon=🌓
emoji_waxing_gibbous_moon=🌔
emoji_full_moon=🌕
emoji_waning_gibbous_moon=🌖
emoji_last_quarter_moon=🌗
emoji_waning_crescent_moon=🌘
emoji_crescent_moon=🌙
emoji_new_moon_face=🌚
emoji_first_quarter_moon_face=🌛
emoji_last_quarter_moon_face=🌜
emoji_thermometer=🌡
emoji_sun=☀
emoji_full_moon_face=🌝
emoji_sun_with_face=🌞
emoji_ringed_planet=🪐
emoji_star=⭐
emoji_glowing_star=🌟
emoji_shooting_star=🌠
emoji_milky_way=🌌
emoji_cloud=☁
emoji_sun_behind_cloud=⛅
emoji_cloud_with_lightning_and_rain=⛈
emoji_sun_behind_small_cloud=🌤
emoji_sun_behind_large_cloud=🌥
emoji_sun_behind_rain_cloud=🌦
emoji_cloud_with_rain=🌧
emoji_cloud_with_snow=🌨
emoji_cloud_with_lightning=🌩
emoji_tornado=🌪
emoji_fog=🌫
emoji_wind_face=🌬
emoji_cyclone=🌀
emoji_rainbow=🌈
emoji_closed_umbrella=🌂
emoji_umbrella=☂
emoji_umbrella_with_rain_drops=☔
emoji_umbrella_on_ground=⛱
emoji_high_voltage=⚡
emoji_snowflake=❄
emoji_snowman=☃
emoji_snowman_without_snow=⛄
emoji_comet=☄
emoji_fire=🔥
emoji_droplet=💧
emoji_water_wave=🌊
emoji_jack_o_lantern=🎃
emoji_christmas_tree=🎄
emoji_fireworks=🎆
emoji_sparkler=🎇
emoji_firecracker=🧨
emoji_sparkles=✨
emoji_balloon=🎈
emoji_party_popper=🎉
emoji_confetti_ball=🎊
emoji_tanabata_tree=🎋
emoji_pine_decoration=🎍
emoji_japanese_dolls=🎎
emoji_carp_streamer=🎏
emoji_wind_chime=🎐
emoji_moon_viewing_ceremony=🎑
emoji_red_envelope=🧧
emoji_ribbon=🎀
emoji_wrapped_gift=🎁
emoji_reminder_ribbon=🎗
emoji_admission_tickets=🎟
emoji_ticket=🎫
emoji_military_medal=🎖
emoji_trophy=🏆
emoji_sports_medal=🏅
emoji_1st_place_medal=🥇
emoji_2nd_place_medal=🥈
emoji_3rd_place_medal=🥉
emoji_soccer_ball=⚽
emoji_baseball=⚾
emoji_softball=🥎
emoji_basketball=🏀
emoji_volleyball=🏐
emoji_american_football=🏈
emoji_rugby_football=🏉
emoji_tennis=🎾
emoji_flying_disc=🥏
emoji_bowling=🎳
emoji_cricket_game=🏏
emoji_field_hockey=🏑
emoji_ice_hockey=🏒
emoji_lacrosse=🥍
emoji_ping_pong=🏓
emoji_badminton=🏸
emoji_boxing_glove=🥊
emoji_martial_arts_uniform=🥋
emoji_goal_net=🥅
emoji_flag_in_hole=⛳
emoji_ice_skate=⛸
emoji_fishing_pole=🎣
emoji_diving_mask=🤿
emoji_running_shirt=🎽
emoji_skis=🎿
emoji_sled=🛷
emoji_curling_stone=🥌
emoji_direct_hit=🎯
emoji_yo_yo=🪀
emoji_kite=🪁
emoji_pool_8_ball=🎱
emoji_crystal_ball=🔮
emoji_nazar_amulet=🧿
emoji_video_game=🎮
emoji_joystick=🕹
emoji_slot_machine=🎰
emoji_game_die=🎲
emoji_puzzle_piece=🧩
emoji_teddy_bear=🧸
emoji_spade_suit=♠
emoji_heart_suit=♥
emoji_diamond_suit=♦
emoji_club_suit=♣
emoji_chess_pawn=♟
emoji_joker=🃏
emoji_mahjong_red_dragon=🀄
emoji_flower_playing_cards=🎴
emoji_performing_arts=🎭
emoji_framed_picture=🖼
emoji_artist_palette=🎨
emoji_thread=🧵
emoji_yarn=🧶
emoji_glasses=👓
emoji_sunglasses=🕶
emoji_goggles=🥽
emoji_lab_coat=🥼
emoji_safety_vest=🦺
emoji_necktie=👔
emoji_t_shirt=👕
emoji_jeans=👖
emoji_scarf=🧣
emoji_gloves=🧤
emoji_coat=🧥
emoji_socks=🧦
emoji_dress=👗
emoji_kimono=👘
emoji_sari=🥻
emoji_one_piece_swimsuit=🩱
emoji_swim_brief=🩲
emoji_shorts=🩳
emoji_bikini=👙
emoji_womans_clothes=👚
emoji_purse=👛
emoji_handbag=👜
emoji_clutch_bag=👝
emoji_shopping_bags=🛍
emoji_backpack=🎒
emoji_mans_shoe=👞
emoji_running_shoe=👟
emoji_hiking_boot=🥾
emoji_flat_shoe=🥿
emoji_high_heeled_shoe=👠
emoji_womans_sandal=👡
emoji_ballet_shoes=🩰
emoji_womans_boot=👢
emoji_crown=👑
emoji_womans_hat=👒
emoji_top_hat=🎩
emoji_graduation_cap=🎓
emoji_billed_cap=🧢
emoji_rescue_workers_helmet=⛑
emoji_prayer_beads=📿
emoji_lipstick=💄
emoji_ring=💍
emoji_gem_stone=💎
emoji_muted_speaker=🔇
emoji_speaker_low_volume=🔈
emoji_speaker_medium_volume=🔉
emoji_speaker_high_volume=🔊
emoji_loudspeaker=📢
emoji_megaphone=📣
emoji_postal_horn=📯
emoji_bell=🔔
emoji_bell_with_slash=🔕
emoji_musical_score=🎼
emoji_musical_note=🎵
emoji_musical_notes=🎶
emoji_studio_microphone=🎙
emoji_level_slider=🎚
emoji_control_knobs=🎛
emoji_microphone=🎤
emoji_headphone=🎧
emoji_radio=📻
emoji_saxophone=🎷
emoji_guitar=🎸
emoji_musical_keyboard=🎹
emoji_trumpet=🎺
emoji_violin=🎻
emoji_banjo=🪕
emoji_drum=🥁
emoji_mobile_phone=📱
emoji_mobile_phone_with_arrow=📲
emoji_telephone=☎
emoji_telephone_receiver=📞
emoji_pager=📟
emoji_fax_machine=📠
emoji_battery=🔋
emoji_electric_plug=🔌
emoji_laptop_computer=💻
emoji_desktop_computer=🖥
emoji_printer=🖨
emoji_keyboard=⌨
emoji_computer_mouse=🖱
emoji_trackball=🖲
emoji_computer_disk=💽
emoji_floppy_disk=💾
emoji_optical_disk=💿
emoji_dvd=📀
emoji_abacus=🧮
emoji_movie_camera=🎥
emoji_film_frames=🎞
emoji_film_projector=📽
emoji_clapper_board=🎬
emoji_television=📺
emoji_camera=📷
emoji_camera_with_flash=📸
emoji_video_camera=📹
emoji_videocassette=📼
emoji_magnifying_glass_tilted_left=🔍
emoji_magnifying_glass_tilted_right=🔎
emoji_candle=🕯
emoji_light_bulb=💡
emoji_flashlight=🔦
emoji_red_paper_lantern=🏮
emoji_diya_lamp=🪔
emoji_notebook_with_decorative_cover=📔
emoji_closed_book=📕
emoji_open_book=📖
emoji_green_book=📗
emoji_blue_book=📘
emoji_orange_book=📙
emoji_books=📚
emoji_notebook=📓
emoji_ledger=📒
emoji_page_with_curl=📃
emoji_scroll=📜
emoji_page_facing_up=📄
emoji_newspaper=📰
emoji_rolled_up_newspaper=🗞
emoji_bookmark_tabs=📑
emoji_bookmark=🔖
emoji_label=🏷
emoji_money_bag=💰
emoji_yen_banknote=💴
emoji_dollar_banknote=💵
emoji_euro_banknote=💶
emoji_pound_banknote=💷
emoji_money_with_wings=💸
emoji_credit_card=💳
emoji_receipt=🧾
emoji_chart_increasing_with_yen=💹
emoji_currency_exchange=💱
emoji_heavy_dollar_sign=💲
emoji_envelope=✉
emoji_e_mail=📧
emoji_incoming_envelope=📨
emoji_envelope_with_arrow=📩
emoji_outbox_tray=📤
emoji_inbox_tray=📥
emoji_package=📦
emoji_closed_mailbox_with_raised_flag=📫
emoji_closed_mailbox_with_lowered_flag=📪
emoji_open_mailbox_with_raised_flag=📬
emoji_open_mailbox_with_lowered_flag=📭
emoji_postbox=📮
emoji_ballot_box_with_ballot=🗳
emoji_pencil=✏
emoji_black_nib=✒
emoji_fountain_pen=🖋
emoji_pen=🖊
emoji_paintbrush=🖌
emoji_crayon=🖍
emoji_memo=📝
emoji_briefcase=💼
emoji_file_folder=📁
emoji_open_file_folder=📂
emoji_card_index_dividers=🗂
emoji_calendar=📅
emoji_tear_off_calendar=📆
emoji_spiral_notepad=🗒
emoji_spiral_calendar=🗓
emoji_card_index=📇
emoji_chart_increasing=📈
emoji_chart_decreasing=📉
emoji_bar_chart=📊
emoji_clipboard=📋
emoji_pushpin=📌
emoji_round_pushpin=📍
emoji_paperclip=📎
emoji_linked_paperclips=🖇
emoji_straight_ruler=📏
emoji_triangular_ruler=📐
emoji_scissors=✂
emoji_card_file_box=🗃
emoji_file_cabinet=🗄
emoji_wastebasket=🗑
emoji_locked=🔒
emoji_unlocked=🔓
emoji_locked_with_pen=🔏
emoji_locked_with_key=🔐
emoji_key=🔑
emoji_old_key=🗝
emoji_hammer=🔨
emoji_axe=🪓
emoji_pick=⛏
emoji_hammer_and_pick=⚒
emoji_hammer_and_wrench=🛠
emoji_dagger=🗡
emoji_crossed_swords=⚔
emoji_pistol=🔫
emoji_bow_and_arrow=🏹
emoji_shield=🛡
emoji_wrench=🔧
emoji_nut_and_bolt=🔩
emoji_gear=⚙
emoji_clamp=🗜
emoji_balance_scale=⚖
emoji_probing_cane=🦯
emoji_link=🔗
emoji_chains=⛓
emoji_toolbox=🧰
emoji_magnet=🧲
emoji_alembic=⚗
emoji_test_tube=🧪
emoji_petri_dish=🧫
emoji_dna=🧬
emoji_microscope=🔬
emoji_telescope=🔭
emoji_satellite_antenna=📡
emoji_syringe=💉
emoji_drop_of_blood=🩸
emoji_pill=💊
emoji_adhesive_bandage=🩹
emoji_stethoscope=🩺
emoji_door=🚪
emoji_bed=🛏
emoji_couch_and_lamp=🛋
emoji_chair=🪑
emoji_toilet=🚽
emoji_shower=🚿
emoji_bathtub=🛁
emoji_razor=🪒
emoji_lotion_bottle=🧴
emoji_safety_pin=🧷
emoji_broom=🧹
emoji_basket=🧺
emoji_roll_of_paper=🧻
emoji_soap=🧼
emoji_sponge=🧽
emoji_fire_extinguisher=🧯
emoji_shopping_cart=🛒
emoji_cigarette=🚬
emoji_coffin=⚰
emoji_funeral_urn=⚱
emoji_moai=🗿
emoji_atm_sign=🏧
emoji_litter_in_bin_sign=🚮
emoji_potable_water=🚰
emoji_wheelchair_symbol=♿
emoji_mens_room=🚹
emoji_womens_room=🚺
emoji_restroom=🚻
emoji_baby_symbol=🚼
emoji_water_closet=🚾
emoji_passport_control=🛂
emoji_customs=🛃
emoji_baggage_claim=🛄
emoji_left_luggage=🛅
emoji_warning=⚠
emoji_children_crossing=🚸
emoji_no_entry=⛔
emoji_prohibited=🚫
emoji_no_bicycles=🚳
emoji_no_smoking=🚭
emoji_no_littering=🚯
emoji_non_potable_water=🚱
emoji_no_pedestrians=🚷
emoji_no_mobile_phones=📵
emoji_no_one_under_eighteen=🔞
emoji_radioactive=☢
emoji_biohazard=☣
emoji_up_arrow=⬆
emoji_up_right_arrow=↗
emoji_right_arrow=➡
emoji_down_right_arrow=↘
emoji_down_arrow=⬇
emoji_down_left_arrow=↙
emoji_left_arrow=⬅
emoji_up_left_arrow=↖
emoji_up_down_arrow=↕
emoji_left_right_arrow=↔
emoji_right_arrow_curving_left=↩
emoji_left_arrow_curving_right=↪
emoji_right_arrow_curving_up=⤴
emoji_right_arrow_curving_down=⤵
emoji_clockwise_vertical_arrows=🔃
emoji_counterclockwise_arrows_button=🔄
emoji_back_arrow=🔙
emoji_end_arrow=🔚
emoji_on_arrow=🔛
emoji_soon_arrow=🔜
emoji_top_arrow=🔝
emoji_place_of_worship=🛐
emoji_atom_symbol=⚛
emoji_om=🕉
emoji_star_of_david=✡
emoji_wheel_of_dharma=☸
emoji_yin_yang=☯
emoji_latin_cross=✝
emoji_orthodox_cross=☦
emoji_star_and_crescent=☪
emoji_peace_symbol=☮
emoji_menorah=🕎
emoji_dotted_six_pointed_star=🔯
emoji_aries=♈
emoji_taurus=♉
emoji_gemini=♊
emoji_cancer=♋
emoji_leo=♌
emoji_virgo=♍
emoji_libra=♎
emoji_scorpio=♏
emoji_sagittarius=♐
emoji_capricorn=♑
emoji_aquarius=♒
emoji_pisces=♓
emoji_ophiuchus=⛎
emoji_shuffle_tracks_button=🔀
emoji_repeat_button=🔁
emoji_repeat_single_button=🔂
emoji_play_button=▶
emoji_fast_forward_button=⏩
emoji_next_track_button=⏭
emoji_play_or_pause_button=⏯
emoji_reverse_button=◀
emoji_fast_reverse_button=⏪
emoji_last_track_button=⏮
emoji_upwards_button=🔼
emoji_fast_up_button=⏫
emoji_downwards_button=🔽
emoji_fast_down_button=⏬
emoji_pause_button=⏸
emoji_stop_button=⏹
emoji_record_button=⏺
emoji_eject_button=⏏
emoji_cinema=🎦
emoji_dim_button=🔅
emoji_bright_button=🔆
emoji_antenna_bars=📶
emoji_vibration_mode=📳
emoji_mobile_phone_off=📴
emoji_female_sign=♀
emoji_male_sign=♂
emoji_medical_symbol=⚕
emoji_infinity=♾
emoji_recycling_symbol=♻
emoji_fleur_de_lis=⚜
emoji_trident_emblem=🔱
emoji_name_badge=📛
emoji_japanese_symbol_for_beginner=🔰
emoji_hollow_red_circle=⭕
emoji_check_mark_button=✅
emoji_check_box_with_check=☑
emoji_check_mark=✔
emoji_multiplication_sign=✖
emoji_cross_mark=❌
emoji_cross_mark_button=❎
emoji_plus_sign=➕
emoji_minus_sign=➖
emoji_division_sign=➗
emoji_curly_loop=➰
emoji_double_curly_loop=➿
emoji_part_alternation_mark=〽
emoji_eight_spoked_asterisk=✳
emoji_eight_pointed_star=✴
emoji_sparkle=❇
emoji_double_exclamation_mark=‼
emoji_exclamation_question_mark=⁉
emoji_question_mark=❓
emoji_white_question_mark=❔
emoji_white_exclamation_mark=❕
emoji_exclamation_mark=❗
emoji_wavy_dash=〰
emoji_copyright=©
emoji_registered=®
emoji_trade_mark=™
emoji_keycap_hashtag=#️⃣
emoji_keycap_star=*️⃣
emoji_keycap_0=0️⃣
emoji_keycap_1=1️⃣
emoji_keycap_2=2️⃣
emoji_keycap_3=3️⃣
emoji_keycap_4=4️⃣
emoji_keycap_5=5️⃣
emoji_keycap_6=6️⃣
emoji_keycap_7=7️⃣
emoji_keycap_8=8️⃣
emoji_keycap_9=9️⃣
emoji_keycap_10=🔟
emoji_input_latin_uppercase=🔠
emoji_input_latin_lowercase=🔡
emoji_input_numbers=🔢
emoji_input_symbols=🔣
emoji_input_latin_letters=🔤
emoji_a_button_blood_type=🅰
emoji_ab_button_blood_type=🆎
emoji_b_button_blood_type=🅱
emoji_cl_button=🆑
emoji_cool_button=🆒
emoji_free_button=🆓
emoji_information=ℹ
emoji_id_button=🆔
emoji_circled_m=Ⓜ
emoji_new_button=🆕
emoji_ng_button=🆖
emoji_o_button_blood_type=🅾
emoji_ok_button=🆗
emoji_p_button=🅿
emoji_sos_button=🆘
emoji_up_button=🆙
emoji_vs_button=🆚
emoji_japanese_here_button=🈁
emoji_japanese_service_charge_button=🈂
emoji_japanese_monthly_amount_button=🈷
emoji_japanese_not_free_of_charge_button=🈶
emoji_japanese_reserved_button=🈯
emoji_japanese_bargain_button=🉐
emoji_japanese_discount_button=🈹
emoji_japanese_free_of_charge_button=🈚
emoji_japanese_prohibited_button=🈲
emoji_japanese_acceptable_button=🉑
emoji_japanese_application_button=🈸
emoji_japanese_passing_grade_button=🈴
emoji_japanese_vacancy_button=🈳
emoji_japanese_congratulations_button=㊗
emoji_japanese_secret_button=㊙
emoji_japanese_open_for_business_button=🈺
emoji_japanese_no_vacancy_button=🈵
emoji_red_circle=🔴
emoji_orange_circle=🟠
emoji_yellow_circle=🟡
emoji_green_circle=🟢
emoji_blue_circle=🔵
emoji_purple_circle=🟣
emoji_brown_circle=🟤
emoji_black_circle=⚫
emoji_white_circle=⚪
emoji_red_square=🟥
emoji_orange_square=🟧
emoji_yellow_square=🟨
emoji_green_square=🟩
emoji_blue_square=🟦
emoji_purple_square=🟪
emoji_brown_square=🟫
emoji_black_large_square=⬛
emoji_white_large_square=⬜
emoji_black_medium_square=◼
emoji_white_medium_square=◻
emoji_black_medium_small_square=◾
emoji_white_medium_small_square=◽
emoji_black_small_square=▪
emoji_white_small_square=▫
emoji_large_orange_diamond=🔶
emoji_large_blue_diamond=🔷
emoji_small_orange_diamond=🔸
emoji_small_blue_diamond=🔹
emoji_red_triangle_pointed_up=🔺
emoji_red_triangle_pointed_down=🔻
emoji_diamond_with_a_dot=💠
emoji_radio_button=🔘
emoji_white_square_button=🔳
emoji_black_square_button=🔲
emoji_chequered_flag=🏁
emoji_triangular_flag=🚩
emoji_crossed_flags=🎌
emoji_black_flag=🏴
emoji_white_flag=🏳
emoji_rainbow_flag=🏳️‍🌈
emoji_pirate_flag=🏴‍☠️
emoji_flag_ascension_island=🇦🇨
emoji_flag_andorra=🇦🇩
emoji_flag_united_arab_emirates=🇦🇪
emoji_flag_afghanistan=🇦🇫
emoji_flag_antigua_and_barbuda=🇦🇬
emoji_flag_anguilla=🇦🇮
emoji_flag_albania=🇦🇱
emoji_flag_armenia=🇦🇲
emoji_flag_angola=🇦🇴
emoji_flag_antarctica=🇦🇶
emoji_flag_argentina=🇦🇷
emoji_flag_american_samoa=🇦🇸
emoji_flag_austria=🇦🇹
emoji_flag_australia=🇦🇺
emoji_flag_aruba=🇦🇼
emoji_flag_aland_islands=🇦🇽
emoji_flag_azerbaijan=🇦🇿
emoji_flag_bosnia_and_herzegovina=🇧🇦
emoji_flag_barbados=🇧🇧
emoji_flag_bangladesh=🇧🇩
emoji_flag_belgium=🇧🇪
emoji_flag_burkina_faso=🇧🇫
emoji_flag_bulgaria=🇧🇬
emoji_flag_bahrain=🇧🇭
emoji_flag_burundi=🇧🇮
emoji_flag_benin=🇧🇯
emoji_flag_st_barthelemy=🇧🇱
emoji_flag_bermuda=🇧🇲
emoji_flag_brunei=🇧🇳
emoji_flag_bolivia=🇧🇴
emoji_flag_caribbean_netherlands=🇧🇶
emoji_flag_brazil=🇧🇷
emoji_flag_bahamas=🇧🇸
emoji_flag_bhutan=🇧🇹
emoji_flag_bouvet_island=🇧🇻
emoji_flag_botswana=🇧🇼
emoji_flag_belarus=🇧🇾
emoji_flag_belize=🇧🇿
emoji_flag_canada=🇨🇦
emoji_flag_cocos_keeling_islands=🇨🇨
emoji_flag_congo___kinshasa=🇨🇩
emoji_flag_central_african_republic=🇨🇫
emoji_flag_congo___brazzaville=🇨🇬
emoji_flag_switzerland=🇨🇭
emoji_flag_cote_divoire=🇨🇮
emoji_flag_cook_islands=🇨🇰
emoji_flag_chile=🇨🇱
emoji_flag_cameroon=🇨🇲
emoji_flag_china=🇨🇳
emoji_flag_colombia=🇨🇴
emoji_flag_clipperton_island=🇨🇵
emoji_flag_costa_rica=🇨🇷
emoji_flag_cuba=🇨🇺
emoji_flag_cape_verde=🇨🇻
emoji_flag_curacao=🇨🇼
emoji_flag_christmas_island=🇨🇽
emoji_flag_cyprus=🇨🇾
emoji_flag_czechia=🇨🇿
emoji_flag_germany=🇩🇪
emoji_flag_diego_garcia=🇩🇬
emoji_flag_djibouti=🇩🇯
emoji_flag_denmark=🇩🇰
emoji_flag_dominica=🇩🇲
emoji_flag_dominican_republic=🇩🇴
emoji_flag_algeria=🇩🇿
emoji_flag_ceuta_and_melilla=🇪🇦
emoji_flag_ecuador=🇪🇨
emoji_flag_estonia=🇪🇪
emoji_flag_egypt=🇪🇬
emoji_flag_western_sahara=🇪🇭
emoji_flag_eritrea=🇪🇷
emoji_flag_spain=🇪🇸
emoji_flag_ethiopia=🇪🇹
emoji_flag_european_union=🇪🇺
emoji_flag_finland=🇫🇮
emoji_flag_fiji=🇫🇯
emoji_flag_falkland_islands=🇫🇰
emoji_flag_micronesia=🇫🇲
emoji_flag_faroe_islands=🇫🇴
emoji_flag_france=🇫🇷
emoji_flag_gabon=🇬🇦
emoji_flag_united_kingdom=🇬🇧
emoji_flag_grenada=🇬🇩
emoji_flag_georgia=🇬🇪
emoji_flag_french_guiana=🇬🇫
emoji_flag_guernsey=🇬🇬
emoji_flag_ghana=🇬🇭
emoji_flag_gibraltar=🇬🇮
emoji_flag_greenland=🇬🇱
emoji_flag_gambia=🇬🇲
emoji_flag_guinea=🇬🇳
emoji_flag_guadeloupe=🇬🇵
emoji_flag_equatorial_guinea=🇬🇶
emoji_flag_greece=🇬🇷
emoji_flag_south_georgia_and_south_sandwich_islands=🇬🇸
emoji_flag_guatemala=🇬🇹
emoji_flag_guam=🇬🇺
emoji_flag_guinea_bissau=🇬🇼
emoji_flag_guyana=🇬🇾
emoji_flag_hong_kong_sar_china=🇭🇰
emoji_flag_heard_and_mcdonald_islands=🇭🇲
emoji_flag_honduras=🇭🇳
emoji_flag_croatia=🇭🇷
emoji_flag_haiti=🇭🇹
emoji_flag_hungary=🇭🇺
emoji_flag_canary_islands=🇮🇨
emoji_flag_indonesia=🇮🇩
emoji_flag_ireland=🇮🇪
emoji_flag_israel=🇮🇱
emoji_flag_isle_of_man=🇮🇲
emoji_flag_india=🇮🇳
emoji_flag_british_indian_ocean_territory=🇮🇴
emoji_flag_iraq=🇮🇶
emoji_flag_iran=🇮🇷
emoji_flag_iceland=🇮🇸
emoji_flag_italy=🇮🇹
emoji_flag_jersey=🇯🇪
emoji_flag_jamaica=🇯🇲
emoji_flag_jordan=🇯🇴
emoji_flag_japan=🇯🇵
emoji_flag_kenya=🇰🇪
emoji_flag_kyrgyzstan=🇰🇬
emoji_flag_cambodia=🇰🇭
emoji_flag_kiribati=🇰🇮
emoji_flag_comoros=🇰🇲
emoji_flag_st_kitts_and_nevis=🇰🇳
emoji_flag_north_korea=🇰🇵
emoji_flag_south_korea=🇰🇷
emoji_flag_kuwait=🇰🇼
emoji_flag_cayman_islands=🇰🇾
emoji_flag_kazakhstan=🇰🇿
emoji_flag_laos=🇱🇦
emoji_flag_lebanon=🇱🇧
emoji_flag_st_lucia=🇱🇨
emoji_flag_liechtenstein=🇱🇮
emoji_flag_sri_lanka=🇱🇰
emoji_flag_liberia=🇱🇷
emoji_flag_lesotho=🇱🇸
emoji_flag_lithuania=🇱🇹
emoji_flag_luxembourg=🇱🇺
emoji_flag_latvia=🇱🇻
emoji_flag_libya=🇱🇾
emoji_flag_morocco=🇲🇦
emoji_flag_monaco=🇲🇨
emoji_flag_moldova=🇲🇩
emoji_flag_montenegro=🇲🇪
emoji_flag_st_martin=🇲🇫
emoji_flag_madagascar=🇲🇬
emoji_flag_marshall_islands=🇲🇭
emoji_flag_macedonia=🇲🇰
emoji_flag_mali=🇲🇱
emoji_flag_myanmar_burma=🇲🇲
emoji_flag_mongolia=🇲🇳
emoji_flag_macao_sar_china=🇲🇴
emoji_flag_northern_mariana_islands=🇲🇵
emoji_flag_martinique=🇲🇶
emoji_flag_mauritania=🇲🇷
emoji_flag_montserrat=🇲🇸
emoji_flag_malta=🇲🇹
emoji_flag_mauritius=🇲🇺
emoji_flag_maldives=🇲🇻
emoji_flag_malawi=🇲🇼
emoji_flag_mexico=🇲🇽
emoji_flag_malaysia=🇲🇾
emoji_flag_mozambique=🇲🇿
emoji_flag_namibia=🇳🇦
emoji_flag_new_caledonia=🇳🇨
emoji_flag_niger=🇳🇪
emoji_flag_norfolk_island=🇳🇫
emoji_flag_nigeria=🇳🇬
emoji_flag_nicaragua=🇳🇮
emoji_flag_netherlands=🇳🇱
emoji_flag_norway=🇳🇴
emoji_flag_nepal=🇳🇵
emoji_flag_nauru=🇳🇷
emoji_flag_niue=🇳🇺
emoji_flag_new_zealand=🇳🇿
emoji_flag_oman=🇴🇲
emoji_flag_panama=🇵🇦
emoji_flag_peru=🇵🇪
emoji_flag_french_polynesia=🇵🇫
emoji_flag_papua_new_guinea=🇵🇬
emoji_flag_philippines=🇵🇭
emoji_flag_pakistan=🇵🇰
emoji_flag_poland=🇵🇱
emoji_flag_st_pierre_and_miquelon=🇵🇲
emoji_flag_pitcairn_islands=🇵🇳
emoji_flag_puerto_rico=🇵🇷
emoji_flag_palestinian_territories=🇵🇸
emoji_flag_portugal=🇵🇹
emoji_flag_palau=🇵🇼
emoji_flag_paraguay=🇵🇾
emoji_flag_qatar=🇶🇦
emoji_flag_reunion=🇷🇪
emoji_flag_romania=🇷🇴
emoji_flag_serbia=🇷🇸
emoji_flag_russia=🇷🇺
emoji_flag_rwanda=🇷🇼
emoji_flag_saudi_arabia=🇸🇦
emoji_flag_solomon_islands=🇸🇧
emoji_flag_seychelles=🇸🇨
emoji_flag_sudan=🇸🇩
emoji_flag_sweden=🇸🇪
emoji_flag_singapore=🇸🇬
emoji_flag_st_helena=🇸🇭
emoji_flag_slovenia=🇸🇮
emoji_flag_svalbard_and_jan_mayen=🇸🇯
emoji_flag_slovakia=🇸🇰
emoji_flag_sierra_leone=🇸🇱
emoji_flag_san_marino=🇸🇲
emoji_flag_senegal=🇸🇳
emoji_flag_somalia=🇸🇴
emoji_flag_suriname=🇸🇷
emoji_flag_south_sudan=🇸🇸
emoji_flag_sao_tome_and_principe=🇸🇹
emoji_flag_el_salvador=🇸🇻
emoji_flag_sint_maarten=🇸🇽
emoji_flag_syria=🇸🇾
emoji_flag_eswatini=🇸🇿
emoji_flag_tristan_da_cunha=🇹🇦
emoji_flag_turks_and_caicos_islands=🇹🇨
emoji_flag_chad=🇹🇩
emoji_flag_french_southern_territories=🇹🇫
emoji_flag_togo=🇹🇬
emoji_flag_thailand=🇹🇭
emoji_flag_tajikistan=🇹🇯
emoji_flag_tokelau=🇹🇰
emoji_flag_timor_leste=🇹🇱
emoji_flag_turkmenistan=🇹🇲
emoji_flag_tunisia=🇹🇳
emoji_flag_tonga=🇹🇴
emoji_flag_turkey=🇹🇷
emoji_flag_trinidad_and_tobago=🇹🇹
emoji_flag_tuvalu=🇹🇻
emoji_flag_taiwan=🇹🇼
emoji_flag_tanzania=🇹🇿
emoji_flag_ukraine=🇺🇦
emoji_flag_uganda=🇺🇬
emoji_flag_us_outlying_islands=🇺🇲
emoji_flag_united_nations=🇺🇳
emoji_flag_united_states=🇺🇸
emoji_flag_uruguay=🇺🇾
emoji_flag_uzbekistan=🇺🇿
emoji_flag_vatican_city=🇻🇦
emoji_flag_st_vincent_and_grenadines=🇻🇨
emoji_flag_venezuela=🇻🇪
emoji_flag_british_virgin_islands=🇻🇬
emoji_flag_us_virgin_islands=🇻🇮
emoji_flag_vietnam=🇻🇳
emoji_flag_vanuatu=🇻🇺
emoji_flag_wallis_and_futuna=🇼🇫
emoji_flag_samoa=🇼🇸
emoji_flag_kosovo=🇽🇰
emoji_flag_yemen=🇾🇪
emoji_flag_mayotte=🇾🇹
emoji_flag_south_africa=🇿🇦
emoji_flag_zambia=🇿🇲
emoji_flag_zimbabwe=🇿🇼
emoji_flag_england=🏴󠁧󠁢󠁥󠁮󠁧󠁿
emoji_flag_scotland=🏴󠁧󠁢󠁳󠁣󠁴󠁿
emoji_flag_wales=🏴󠁧󠁢󠁷󠁬󠁳󠁿

# src/lib/environment.sh
#!/usr/bin/env bash

function __osx() {
  # __osx - return if we are running in 'Darwin' (macOS)
  [[ $(uname) == "Darwin" ]]
}

function __ubuntu() {
  [[ $(uname) == "Linux" && $(cat /etc/issue | grep -i ubuntu) ]]
}

function noop() {
  echo 'noop' >/dev/null
}

function __os_name() {
  local my_os
  my_os=$(uname -s)
  echo "${my_os,,}"
}

function __arch() {
  local my_arch
  my_arch=$(uname -m)

  local suffix
  case $my_arch in
  "x86_64")
    suffix="amd64"
    ;;
  "i686" | "i386")
    suffix="386"
    ;;
  "arm64")
    suffix="arm64"
    ;;
  *)
    echo_error "Unsupported architecture: $my_arch"
    exit 1
    ;;
  esac

  echo "$suffix"
}

# src/lib/ini_config.sh
#!/usr/bin/env bash

# -------------------------------------------------------------------------------- #
# Description                                                                      #
# -------------------------------------------------------------------------------- #
# A 'complete' ini file parsers written in pure bash (4), it was written for no    #
# other reason that one did not exist. It is completely pointless apart from some  #
# clever tricks.                                                                   #
# -------------------------------------------------------------------------------- #

# -------------------------------------------------------------------------------- #
# Global Variables                                                                 #
# -------------------------------------------------------------------------------- #
# Global variables which can be set by the calling script, but need to be declared #
# here also to ensure the script is clean and error free.                          #
#                                                                                  #
# case_sensitive_sections - should section names be case sensitive                 #
# case_sensitive_keys     - should key names be case sensitive                     #
# show_config_warnings    - should we show config warnings                         #
# show_config_errors      - should we show config errors                           #
# -------------------------------------------------------------------------------- #

declare case_sensitive_sections
declare case_sensitive_keys
declare show_config_warnings
declare show_config_errors

# -------------------------------------------------------------------------------- #
# Default Section                                                                  #
# -------------------------------------------------------------------------------- #
# Any values that are found outside of a defined section need to be put somewhere  #
# so they can be recalled as needed. Sections is set up with a 'default' for this  #
# purpose.                                                                         #
# -------------------------------------------------------------------------------- #

DEFAULT_SECTION='default'

sections=( "${DEFAULT_SECTION}" )

# -------------------------------------------------------------------------------- #
# Local Variables                                                                  #
# -------------------------------------------------------------------------------- #
# The local variables which can be overridden by the global variables above.       #
#                                                                                  #
# local_case_sensitive_sections - should section names be case sensitive           #
# local_case_sensitive_keys     - should key names be case sensitive               #
# local_show_config_warnings    - should we show config warnings                   #
# local_show_config_errors      - should we show config errors                     #
# -------------------------------------------------------------------------------- #

local_case_sensitive_sections=true
local_case_sensitive_keys=true
local_show_config_warnings=true
local_show_config_errors=true

# -------------------------------------------------------------------------------- #
# Set Global Variables                                                             #
# -------------------------------------------------------------------------------- #
# Check to see if the global overrides are set and if so, override the defaults.   #
#                                                                                  #
# Error checking is in place to ensure that the override contains a valid value of #
# true or false, anything else is ignored.
# -------------------------------------------------------------------------------- #

function setup_global_variables
{
    if [[ -n "${case_sensitive_sections}" ]] && [[ "${case_sensitive_sections}" = false || "${case_sensitive_sections}" = true ]]; then
         local_case_sensitive_sections=$case_sensitive_sections
    fi

    if [[ -n "${case_sensitive_keys}" ]] && [[ "${case_sensitive_keys}" = false || "${case_sensitive_keys}" = true ]]; then
         local_case_sensitive_keys=$case_sensitive_keys
    fi

    if [[ -n "${show_config_warnings}" ]] && [[ "${show_config_warnings}" = false || "${show_config_warnings}" = true ]]; then
         local_show_config_warnings=$show_config_warnings
    fi

    if [[ -n "${show_config_errors}" ]] && [[ "${show_config_errors}" = false || "${show_config_errors}" = true ]]; then
         local_show_config_errors=$show_config_errors
    fi
}

# -------------------------------------------------------------------------------- #
# in Array                                                                         #
# -------------------------------------------------------------------------------- #
# A function to check to see if a given value exists in a given array.             #
# -------------------------------------------------------------------------------- #

function in_array()
{
    local haystack="${1}[@]"
    local needle=${2}

    for i in ${!haystack}; do
        if [[ ${i} == "${needle}" ]]; then
            return 0
        fi
    done
    return 1
}

# -------------------------------------------------------------------------------- #
# Show Warning                                                                     #
# -------------------------------------------------------------------------------- #
# A wrapper to display any configuration warnings, taking into account if the      #
# local_show_config_warnings flag is set to true.                                  #
# -------------------------------------------------------------------------------- #

function show_warning()
{
    if [[ "${local_show_config_warnings}" = true ]]; then
        format=$1
        shift;

        # shellcheck disable=SC2059
        printf "[ WARNING ] ${format}" "$@";
    fi
}

# -------------------------------------------------------------------------------- #
# Show Error                                                                       #
# -------------------------------------------------------------------------------- #
# A wrapper to display any configuration errors, taking into account if the        #
# local_show_config_errorss flag is set to true.                                   #
# -------------------------------------------------------------------------------- #

function show_error()
{
    if [[ "${local_show_config_errors}" = true ]]; then
        format=$1
        shift;

        # shellcheck disable=SC2059
        printf "[ ERROR ] ${format}" "$@";
    fi
}

# -------------------------------------------------------------------------------- #
# Process Section Name                                                             #
# -------------------------------------------------------------------------------- #
# Once we have located a section name within the given config file, we need to     #
# 'cleanse' the value.                                                             #
# -------------------------------------------------------------------------------- #

function process_section_name()
{
    local section=$1

    section="${section##*( )}"                                                     # Remove leading spaces
    section="${section%%*( )}"                                                     # Remove trailing spaces
    section=$(echo -e "${section}" | tr -s '[:punct:] [:blank:]' '_')              # Replace all :punct: and :blank: with underscore and squish
    section=$(echo -e "${section}" | sed 's/[^a-zA-Z0-9_]//g')                     # Remove non-alphanumberics (except underscore)

    if [[ "${local_case_sensitive_sections}" = false ]]; then
        section=$(echo -e "${section}" | tr '[:upper:]' '[:lower:]')               # Lowercase the section name
    fi
    echo "${section}"
}

# -------------------------------------------------------------------------------- #
# Process Key Name                                                                 #
# -------------------------------------------------------------------------------- #
# Once we have located a key name on a given line, we need to 'cleanse' the value. #
# -------------------------------------------------------------------------------- #

function process_key_name()
{
    local key=$1

    key="${key##*( )}"                                                             # Remove leading spaces
    key="${key%%*( )}"                                                             # Remove trailing spaces
    key=$(echo -e "${key}" | tr -s '[:punct:] [:blank:]' '_')                      # Replace all :punct: and :blank: with underscore and squish
    key=$(echo -e "${key}" | sed 's/[^a-zA-Z0-9_]//g')                             # Remove non-alphanumberics (except underscore)

    if [[ "${local_case_sensitive_keys}" = false ]]; then
        key=$(echo -e "${key}" | tr '[:upper:]' '[:lower:]')                       # Lowercase the section name
    fi
    echo "${key}"
}

# -------------------------------------------------------------------------------- #
# Process Value                                                                    #
# -------------------------------------------------------------------------------- #
# Once we have located a value attached to a key, we need to 'cleanse' the value.  #
# -------------------------------------------------------------------------------- #

function process_value()
{
    local value=$1

    value="${value%%\;*}"                                                          # Remove in line right comments
    value="${value%%\#*}"                                                          # Remove in line right comments
    value="${value##*( )}"                                                         # Remove leading spaces
    value="${value%%*( )}"                                                         # Remove trailing spaces

    value=$(escape_string "$value")

    echo "${value}"
}

# -------------------------------------------------------------------------------- #
# Escape string                                                                    #
# -------------------------------------------------------------------------------- #
# Replace ' with SINGLE_QUOTE to avoid issues with eval.                           #
# -------------------------------------------------------------------------------- #

function escape_string()
{
    local clean

    clean=${1//\'/SINGLE_QUOTE}
    echo "${clean}"
}

# -------------------------------------------------------------------------------- #
# Un-Escape string                                                                 #
# -------------------------------------------------------------------------------- #
# Convert SINGLE_QUOTE back to ' when returning the value to the caller.           #
# -------------------------------------------------------------------------------- #

function unescape_string()
{
    local orig

    orig=${1//SINGLE_QUOTE/\'}
    echo "${orig}"
}

# -------------------------------------------------------------------------------- #
# Parse ini file                                                                   #
# -------------------------------------------------------------------------------- #
# Read a named file line by line and process as required.                          #
# -------------------------------------------------------------------------------- #

function process_ini_file()
{
    local line_number=0
    local section="${DEFAULT_SECTION}"
    local key_array_name=''

    setup_global_variables

    shopt -s extglob
#    setopt extended_glob

    while read -r line; do
        line_number=$((line_number+1))

        if [[ $line =~ ^# || -z $line ]]; then                                 # Ignore comments / empty lines
            continue;
        fi

        if [[ $line =~ ^"["(.+)"]"$ ]]; then                                   # Match pattern for a 'section'
            section=$(process_section_name "${BASH_REMATCH[1]}")

            if ! in_array sections "${section}"; then
                eval "${section}_keys=()"                                      # Use eval to declare the keys array
                eval "${section}_values=()"                                    # Use eval to declare the values array
                sections+=("${section}")                                       # Add the section name to the list
            fi
        elif [[ $line =~ ^(.*)"="(.*) ]]; then                                 # Match patter for a key=value pair
            key=$(process_key_name "${BASH_REMATCH[1]}")
            value=$(process_value "${BASH_REMATCH[2]}")

            if [[ -z ${key} ]]; then
                show_error 'line %d: No key name\n' "${line_number}"
            elif [[ -z ${value} ]]; then
                show_error 'line %d: No value\n' "${line_number}"
            else
                if [[ "${section}" == "${DEFAULT_SECTION}" ]]; then
                    show_warning '%s=%s - Defined on line %s before first section - added to "%s" group\n' "${key}" "${value}" "${line_number}" "${DEFAULT_SECTION}"
                fi

                eval key_array_name="${section}_keys"

                if in_array "${key_array_name}" "${key}"; then
                    show_warning 'key %s - Defined multiple times within section %s\n' "${key}" "${section}"
                fi
                eval "${section}_keys+=(${key})"                               # Use eval to add to the keys array
                eval "${section}_values+=('${value}')"                         # Use eval to add to the values array
                eval "${section}_${key}='${value}'"                            # Use eval to declare a variable
            fi
        fi
    done < "$1"
}

# -------------------------------------------------------------------------------- #
# Get Value                                                                        #
# -------------------------------------------------------------------------------- #
# Retrieve a value for a specific key from a named section.                        #
# -------------------------------------------------------------------------------- #

function get_value()
{
    local section=''
    local key=''
    local value=''
    local keys=''
    local values=''

    section=$(process_section_name "${1}")
    key=$(process_key_name "${2}")

    eval "keys=( \"\${${section}_keys[@]}\" )"
    eval "values=( \"\${${section}_values[@]}\" )"

    for i in "${!keys[@]}"; do
        if [[ "${keys[$i]}" = "${key}" ]]; then
            orig=$(unescape_string "${values[$i]}")
            printf '%s' "${orig}"
        fi
    done
}

# -------------------------------------------------------------------------------- #
# Display Config                                                                   #
# -------------------------------------------------------------------------------- #
# Display all of the post processed configuration.                                 #
#                                                                                  #
# NOTE: This is without comments etec.                                             #
# -------------------------------------------------------------------------------- #

function display_config()
{
    local section=''
    local key=''
    local value=''

    for s in "${!sections[@]}"; do
        section=${sections[$s]}

        printf '[%s]\n' "${section}"

        eval "keys=( \"\${${section}_keys[@]}\" )"
        eval "values=( \"\${${section}_values[@]}\" )"

        for i in "${!keys[@]}"; do
            orig=$(unescape_string "${values[$i]}")
            printf '%s=%s\n' "${keys[$i]}" "${orig}"
        done
    printf '\n'
    done
}

# -------------------------------------------------------------------------------- #
# Display Config by Section                                                        #
# -------------------------------------------------------------------------------- #
# Display all of the post processed configuration for a given section.             #
#                                                                                  #
# NOTE: This is without comments etec.                                             #
# -------------------------------------------------------------------------------- #

function display_config_by_section()
{
    local section=$1
    local key=''
    local value=''
    local keys=''
    local values=''

    printf '[%s]\n' "${section}"

    eval "keys=( \"\${${section}_keys[@]}\" )"
    eval "values=( \"\${${section}_values[@]}\" )"

    for i in "${!keys[@]}"; do
        orig=$(unescape_string "${values[$i]}")
        printf '%s=%s\n' "${keys[$i]}" "${orig}"
    done
    printf '\n'
}

# -------------------------------------------------------------------------------- #
# End of Script                                                                    #
# -------------------------------------------------------------------------------- #
# This is the end - nothing more to see here.                                      #
# -------------------------------------------------------------------------------- #

# src/lib/parse_version_string.sh
#!/usr/bin/env bash

function get_version_major() {

  IFS='.' read -ra version_arr <<< "$1"
  echo "${version_arr[0]}"
}

function get_version_minor() {

  IFS='.' read -ra version_arr <<< "$1"
  echo "${version_arr[1]}"
}

function get_version_patch() {

  IFS='.' read -ra version_arr <<< "$1"
  echo "${version_arr[2]}"
}

# src/lib/print_verbose_values.sh
#!/usr/bin/env bash

function print_verbose_values_maybe() {

  if [[ -n "${args[--verbose]}" ]]; then
    echo "$(poetry --version)"
    echo "$(poetry run dbx --version)"
    echo "Databricks CLI $(poetry run databricks --version)"
  fi
}

# src/lib/redact_string.sh
#!/usr/bin/env bash

set -euo pipefail

function _redact_string() {
  local target_string
  target_string=$1

  local num_visisble_chars
  num_visisble_chars=$2

  local count
  count=$((${#target_string}-$num_visisble_chars))

  local stars
  stars=$(printf '*%.0s' echo $(eval echo {0..$count}))

  local is_left
  is_left=$3

  local sed_str
  if [[ $is_left == "true" ]]; then
    sed_str="s/^.\{${count}\}/${stars}/g"
  else
    sed_str="s/.\{${count}\}$/${stars}/g"
  fi

  target_string_masked=$(echo $target_string | sed -e $sed_str)
  echo $target_string_masked
}

function redact_string_right() {
  _redact_string $1 $2 false
}

function redact_string_left() {
  _redact_string $1 $2 true
}

set +euo pipefail

# src/lib/send_completions.sh
send_completions() {
  echo $'# cli completion                                           -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_cli_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $'  '
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_cli_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'configure hooks\'*\'--hook\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "pre-commit pre-push")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'configure search-repos\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --path --verbose -h -p -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config hooks\'*\'--hook\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "pre-commit pre-push")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config search-repos\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --path --verbose -h -p -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'configure download\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --repo-org --verbose -h -r -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'configure hooks\'*\'-H\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "pre-commit pre-push")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'configure update\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --repo-org --verbose -h -r -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'configure hooks\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --hook --verbose -H -h -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config hooks\'*\'-H\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "pre-commit pre-push")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config download\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --repo-org --verbose -h -r -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config update\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --repo-org --verbose -h -r -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config hooks\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --hook --verbose -H -h -v")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'run\'*\'--hook\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "pre-commit pre-push")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'configure\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help -h download hooks search-repos update")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'run\'*\'-H\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "pre-commit pre-push")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help -h download hooks search-repos update")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'run\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --hook -H -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_cli_completions_filter "--help --version -h -v config configure run")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _cli_completions cli'
  echo $''
  echo $'# ex: filetype=sh'
}

# src/lib/source_dir.sh
#!/usr/bin/env bash

source_dir() {
  SOURCE="${BASH_SOURCE[0]:-$0}"
  while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$(cd -P "$(dirname -- "$SOURCE")" &>/dev/null && pwd 2>/dev/null)"
    SOURCE="$(readlink -- "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="${DIR}/${SOURCE}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  DIR="$(cd -P "$(dirname -- "$SOURCE")" &>/dev/null && pwd 2>/dev/null)"
  echo $DIR
}

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# src/lib/yaml.sh
yaml_load() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
   local fs

   fs=$(echo @|tr @ '\034')

   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
   awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
   }'
}

# :command.command_functions

# :command.function
cli_configure_hooks_command() {
  # src/configure_hooks_command.sh
  #!/usr/bin/env bash

  #!/bin/bash
  set -euo pipefail

  IFS=$'\n'
  function run() {

    TALISMAN_HOOK_SCRIPT_PATH=$1
    EXCEPTIONS_FILE=$2 #pre-existing-hooks.paths
    DOT_GIT_DIR=$3
    HOOK_SCRIPT=$4

    REPO_HOOK_SCRIPT=${DOT_GIT_DIR}/hooks/${HOOK_SCRIPT}
    #check if a hook already exists
    if [ -e "${REPO_HOOK_SCRIPT}" ]; then
      #check if already hooked up to talisman
      if [ "${REPO_HOOK_SCRIPT}" -ef "${TALISMAN_HOOK_SCRIPT_PATH}" ]; then
        echo_success "Talisman already setup in ${REPO_HOOK_SCRIPT}"
      else
        if [ -e "${DOT_GIT_DIR}/../.pre-commit-config.yaml" ]; then
          echo_error "Pre-existing pre-commit.com hook detected in ${DOT_GIT_DIR}/hooks"
        fi
        echo ${DOT_GIT_DIR} | sed 's#/.git$##' >>${EXCEPTIONS_FILE}
      fi
    else
      echo "Setting up ${HOOK_SCRIPT} hook in ${DOT_GIT_DIR}/hooks"
      mkdir -p ${DOT_GIT_DIR}/hooks || (echo_error "Could not create hooks directory" && return)
      LN_FLAGS="-sf"
      [ -n "true" ] && LN_FLAGS="${LN_FLAGS}v"
      OS=$(uname -s)
      case $OS in
      "MINGW32_NT-10.0-WOW" | "MINGW64_NT-10.0")
        DOT_GIT_DIR_WIN=$(sed -e 's/\/\([a-z]\)\//\1:\\/' -e 's/\//\\/g' <<<"$DOT_GIT_DIR")
        TALISMAN_HOOK_SCRIPT_PATH_WIN=$(sed -e 's/\/\([a-z]\)\//\1:\\/' -e 's/\//\\/g' <<<"$TALISMAN_HOOK_SCRIPT_PATH")
        cmd <<<"mklink /H "${DOT_GIT_DIR_WIN}\\hooks\\${HOOK_SCRIPT}" "${TALISMAN_HOOK_SCRIPT_PATH_WIN}"" >/dev/null
        ;;
      *)
        ln ${LN_FLAGS} ${TALISMAN_HOOK_SCRIPT_PATH} ${DOT_GIT_DIR}/hooks/${HOOK_SCRIPT}
        ;;
      esac

      echo_success "DONE"
    fi
  }

  run $@

}

# :command.function
cli_configure_download_command() {
  # src/configure_download_command.sh
  #!/usr/bin/env bash

  repo_org="${args["--repo-org"]}"
  binary_name="talisman_$(__os_name)_$(__arch)"

  assets=$(curl -Ls https://api.github.com/repos/"$repo_org"/releases/latest)
  download_url=$(echo "$assets" | grep download_url | awk '{print $2}' | tr -d '"' | grep "$binary_name")
  checksum_url=$(echo "$assets" | grep download_url | awk '{print $2}' | tr -d '"' | grep "checksum")

  temp_dir=$(mktemp -d)

  cyan_ln "Downloading talisman binary."
  mkdir -p $HOME/.talisman/bin
  curl --location --silent "${download_url}" >"$temp_dir"/"$binary_name"
  curl --location --silent "${checksum_url}" | grep "$binary_name"  >"$temp_dir"/checksums

  pushd "$temp_dir" 2>&1 >/dev/null || exit
  sha256sum -c checksums

  if [ $? -eq 0 ]; then
    mv "$temp_dir"/"$binary_name" "$HOME"/.talisman/bin/talisman
    chmod +x "$HOME"/.talisman/bin/talisman
    cp "$HOME"/.talisman/bin/talisman "$HOME"/.talisman/bin/"$binary_name"
    rm -rf "$temp_dir"
    green_ln "Talisman binary downloaded successfully."
    popd 2>&1 >/dev/null || exit
  else
    red_ln "Talisman binary download failed."
    popd 2>&1 >/dev/null || exit
    exit 1
  fi

}

# :command.function
cli_configure_update_command() {
  # src/configure_update_command.sh
  #!/usr/bin/env bash

  repo_org="${args["--repo-org"]}"
  binary_name="talisman_$(__os_name)_$(__arch)"

  assets=$(curl -Ls https://api.github.com/repos/"$repo_org"/releases/latest)
  latest_version=$(echo "$assets" | grep tag_name | awk '{print $2}' | tr -d '"' | tr -d ',' | tr -d 'v')
  current_version=$(talisman --version | awk '{print $2}')

  if [[ "$latest_version" != "$current_version" ]]; then
      $(source_dir)/cli configure download
  fi
}

# :command.function
cli_configure_search_repos_command() {
  # src/configure_search_repos_command.sh
  #!/usr/bin/env bash
  path="${args["--path"]}"

  echo -e "\tSearching ${path} for git repositories"

  EXTRA_SEARCH_OPTS=""
  SUDO_PREFIX=""
  if [[ "${SEARCH_ROOT}" == "/" ]]; then
    echo -e "\tPlease enter your password when prompted to enable script to search as root user:"
    SUDO_PREFIX="sudo"
    EXTRA_SEARCH_OPTS="-xdev \( -path '/private/var' -prune \) -o"
  fi

  CMD_STRING="${SUDO_PREFIX} find ${path} ${EXTRA_SEARCH_OPTS} -name .git -type d"

  eval "${CMD_STRING}" || true

}

# :command.function
cli_run_command() {
  # src/run_command.sh
  #!/usr/bin/env bash

  #!/bin/bash
  shopt -s extglob

  # Download and install updates if available

  # Don't run talisman checks in a git repo, if we find a .talisman_skip or .talisman_skip.pre-<commit/push> file in the repo
  # Run interactive mode if we are running pre-commit

  #CMD="${TALISMAN_BINARY} ${DEBUG_OPTS} --githook ${HOOKNAME} ${INTERACTIVE}"
  #${CMD}

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    cli_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  configure | config )
    action="configure"
    shift
    cli_configure_parse_requirements "$@"
    shift $#
    ;;

  run )
    action="run"
    shift
    cli_run_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    cli_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
cli_configure_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_configure_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  hooks )
    action="hooks"
    shift
    cli_configure_hooks_parse_requirements "$@"
    shift $#
    ;;

  download )
    action="download"
    shift
    cli_configure_download_parse_requirements "$@"
    shift $#
    ;;

  update )
    action="update"
    shift
    cli_configure_update_parse_requirements "$@"
    shift $#
    ;;

  search-repos )
    action="search-repos"
    shift
    cli_configure_search_repos_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    cli_configure_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
cli_configure_hooks_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_configure_hooks_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="configure hooks"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --hook | -H )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--hook]="$2"
        shift
        shift
      else
        printf "%s\n" "--hook requires an argument: --hook, -H HOOK" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --verbose | -v )

      # :flag.case_no_arg
      args[--verbose]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args[--hook]+x} ]]; then
    printf "missing required flag: --hook, -H HOOK\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args[--hook]} =~ ^(pre-commit|pre-push)$ ]]; then
    printf "%s\n" "--hook must be one of: pre-commit, pre-push" >&2
    exit 1
  fi

}

# :command.parse_requirements
cli_configure_download_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_configure_download_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="configure download"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --verbose | -v )

      # :flag.case_no_arg
      args[--verbose]=1
      shift
      ;;

    # :flag.case
    --repo-org | -r )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--repo-org]="$2"
        shift
        shift
      else
        printf "%s\n" "--repo-org requires an argument: --repo-org, -r REPO-ORG" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args[--repo-org]:-} ]] || args[--repo-org]="thoughtworks/talisman"

}

# :command.parse_requirements
cli_configure_update_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_configure_update_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="configure update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --verbose | -v )

      # :flag.case_no_arg
      args[--verbose]=1
      shift
      ;;

    # :flag.case
    --repo-org | -r )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--repo-org]="$2"
        shift
        shift
      else
        printf "%s\n" "--repo-org requires an argument: --repo-org, -r REPO-ORG" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args[--repo-org]:-} ]] || args[--repo-org]="thoughtworks/talisman"

}

# :command.parse_requirements
cli_configure_search_repos_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_configure_search_repos_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="configure search-repos"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --path | -p )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--path]="$2"
        shift
        shift
      else
        printf "%s\n" "--path requires an argument: --path, -p PATH" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --verbose | -v )

      # :flag.case_no_arg
      args[--verbose]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
cli_run_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_run_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --hook | -H )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--hook]="$2"
        shift
        shift
      else
        printf "%s\n" "--hook requires an argument: --hook, -H HOOK" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args[--hook]+x} ]]; then
    printf "missing required flag: --hook, -H HOOK\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args[--hook]} =~ ^(pre-commit|pre-push)$ ]]; then
    printf "%s\n" "--hook must be one of: pre-commit, pre-push" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.2.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "configure" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_configure_usage
    else
      cli_configure_command
    fi

  elif [[ $action == "configure hooks" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_configure_hooks_usage
    else
      cli_configure_hooks_command
    fi

  elif [[ $action == "configure download" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_configure_download_usage
    else
      cli_configure_download_command
    fi

  elif [[ $action == "configure update" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_configure_update_usage
    else
      cli_configure_update_command
    fi

  elif [[ $action == "configure search-repos" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_configure_search_repos_usage
    else
      cli_configure_search_repos_command
    fi

  elif [[ $action == "run" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_run_usage
    else
      cli_run_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
